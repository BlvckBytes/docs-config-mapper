"use strict";(self.webpackChunkdocs_config_mapper=self.webpackChunkdocs_config_mapper||[]).push([[307],{118:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=i(4848),o=i(8453);const s={sidebar_position:3},r="Configuration File",a={id:"configuration-file",title:"Configuration File",description:"All keys and expressions within YAML configuration-files are written in English, since this language represents a widely accepted common-ground.",source:"@site/docs/configuration-file.md",sourceDirName:".",slug:"/configuration-file",permalink:"/docs-config-mapper/configuration-file",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"documentationSidebar",previous:{title:"Pre-Processor",permalink:"/docs-config-mapper/pre-processor"},next:{title:"Add A Translation",permalink:"/docs-config-mapper/add-a-translation"}},c={},l=[{value:"Pre-Processor Input",id:"pre-processor-input",level:2},{value:"Expressions",id:"expressions",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"configuration-file",children:"Configuration File"})}),"\n",(0,t.jsxs)(n.p,{children:["All keys and expressions within ",(0,t.jsx)(n.code,{children:"YAML"})," configuration-files are written in English, since this language represents a widely accepted common-ground."]}),"\n",(0,t.jsx)(n.h2,{id:"pre-processor-input",children:"Pre-Processor Input"}),"\n",(0,t.jsxs)(n.p,{children:["The instruction containing information about which input-file to apply when pre-processing has to occur within the header-comment of the configuration; the header-comment consists of any number of consequtive commented lines. The notation is as simple as the input-file itself, being simply ",(0,t.jsx)(n.code,{children:"PRE-PROCESSOR-INPUT <file-name>"}),"; localization-files are kept in the same directory as the config itself."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# PRE-PROCESSOR-INPUT zh_cn.txt\n\nconfig:\n  starts: here\n"})}),"\n",(0,t.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["Expressions are parsed using ",(0,t.jsx)(n.a,{href:"https://github.com/BlvckBytes/GPEEE",children:"GPEEE"}),", while keys are mapped to Java-objects using ",(0,t.jsx)(n.a,{href:"https://github.com/BlvckBytes/BBConfigMapper",children:"BBConfigMapper"}),"; to provide additional plugin-specific features, ",(0,t.jsx)(n.a,{href:"https://github.com/BlvckBytes/BukkitEvaluable",children:"BukkitEvaluable"})," wraps the mapper. While there is still a lot of room for improvement, basic feature-documentation can be found at the README of these linked-to repositories."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);